{
    {
        int nestedInt;
        nestedInt = 20;
        prt("nestedInt (20) = ");
        prtln(nestedInt);
    }

    // Test integer type with indirect value assignment
    int myInt;
    myInt = 42;
    prt("myInt (42): ");
    prtln(myInt);

    // Test decimal type with indirect value assignment
    dec myDecimal;
    myDecimal = 3.14 + 3.5;
    prt("myDecimal (6.640000): ");
    prtln(myDecimal);
    
    // Test integer type with indirect assignment and simple operations
    int secondInt;
    secondInt = myInt + 1 * 3;
    prt("secondInt (45): ");
    prtln(secondInt);

    // Test negation of decimal type
    dec negDec;
    negDec = -20.0;
    prt("negDec (-20) = ");
    prtln(negDec);
    negDec = negDec + 40.0;
    negDec = negDec * -2.0;
    negDec = -negDec;
    prt("negDec (40) = ");
    prtln(negDec);

    // Test decimal type with indirect assignment and simple operations
    dec secondDec;
    secondDec = myDecimal - 2.0 / 3.0;
    prt("secondDec (5.973333): ");
    prtln(secondDec);
    
    // Test string type with indirect assignment and concatenation
    str myString;
    myString = "Marvin" + " is a nice " + "Roboter";
    prt("myString: ");
    prtln(myString);
    
    // Test unassigned int
    int thirdInt;
    prt("thirdInt = ");
    prtln(thirdInt);
    
    // Test operations on unassigned int
    int forthInt;
    forthInt = 3 * thirdInt;
    prt("forthInt = ");
    prtln(forthInt);

    // Test unassigned string
    str undefString;
    prt("undefString = ");
    prtln(undefString);

    // Test nested scope
    {
        int nestedInt;
        nestedInt = 5;
        prt("nestedInt (5) = ");
        prtln(nestedInt);

        // Another nested scope
        {
            dec nestedDec;
            nestedDec = 4.20;
            prt("nestedDec (4.200000) = ");
            prtln(nestedDec);
        }

        dec nestedDec;
        nestedDec = 6.66;
        prt("nestedDec (6.660000) = ");
        prtln(nestedDec);
    }
}
