{
    // Test maximum and minimum integer values
    int maxInt;
    maxInt = 2147483647;  // Maximum 32-bit integer
    prtln("maxInt = " + maxInt);
    maxInt = maxInt + 1;  // Should wrap around
    prtln("maxInt after overflow = " + maxInt);

    int minInt;
    minInt = -2147483648;  // Minimum 32-bit integer
    prtln("minInt = " + minInt);
    minInt = minInt - 1;  // Should wrap around
    prtln("minInt after underflow = " + minInt);

    // Test decimal precision and rounding
    dec preciseDec;
    preciseDec = 3.14159265359;
    prtln("preciseDec = " + preciseDec);  // Should show limited precision

    // Test complex arithmetic expressions
    dec complexMath;
    complexMath = (3.14 * 2.0) + (4.0 / 2.0) - (1.0 * 3.0);
    prtln("complexMath = " + complexMath);

    // Test nested arithmetic with parentheses
    int nestedMath;
    nestedMath = ((2 + 3) * 4) - (6 / 2);
    prtln("nestedMath = " + nestedMath);

    // Test string operations with numbers
    str numberString;
    numberString = "Value: " + 42 + " and " + 3.14;
    prtln(numberString);

    // Test multiple dice rolls in expressions
    int complexRoll;
    complexRoll = (2d6 + 3) * (1d4 + 1);
    prtln("complexRoll = " + complexRoll);

    // Test advantage and disadvantage combinations
    int advDisadvRoll;
    advDisadvRoll = 2d20 adv + 1d20 dadv;
    prtln("advDisadvRoll = " + advDisadvRoll);

    // Test complex conditional logic
    int checkValue;
    checkValue = 15;
    if (checkValue >= 10) {
        if (checkValue == 15) {
            prtln("Value is exactly 15");
        } 
        if (checkValue != 15) {
            prtln("Value is between 10 and 20, but not 15");
        }
    }

    // Test multiple operations in a single line
    int multiOp;
    multiOp = 5;
    multiOp = multiOp + 1 * 2 - 3 / 1;
    prtln("multiOp = " + multiOp);

    // Test string concatenation with mixed types
    str mixedString;
    mixedString = "Number: " + 42 + " Decimal: " + 3.14 + " Roll: " + 2d6;
    prtln(mixedString);

    // Test edge case dice rolls
    int edgeRoll;
    edgeRoll = 1d1;  // Minimum possible roll
    prtln("Minimum roll = " + edgeRoll);
    edgeRoll = 1d100;  // Large dice
    prtln("Large dice roll = " + edgeRoll);
    edgeRoll = 10d1;  // Multiple minimum dice
    prtln("Multiple minimum dice = " + edgeRoll);
} 